//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace EF.GenericRepository.Entity
{
    
    
    [Serializable]
    public partial class Log : EntityBase<int>
    {
        #region Primitive Properties
    
        public override int Id
        {
            get;
            set;
        }
                
        public virtual int LevelId
        {
            get { return _levelId; }
            set
            {
                if (_levelId != value)
                {
                    if (Level != null && Level.Id != value)
                    {
                        Level = null;
                    }
                    _levelId = value;
                }
            }
        }
        private int _levelId;
    
        public virtual Nullable<System.DateTime> Date
        {
            get;
            set;
        }
    
        public virtual string Thread
        {
            get;
            set;
        }
    
        public virtual string Location
        {
            get;
            set;
        }
    
        public virtual string Message
        {
            get;
            set;
        }
    
        public virtual System.DateTimeOffset CreateTime
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual Level Level
        {
            get { return _level; }
            set
            {
                if (!ReferenceEquals(_level, value))
                {
                    var previousValue = _level;
                    _level = value;
                    FixupLevel(previousValue);
                }
            }
        }
        private Level _level;

        #endregion

        #region Association Fixup
    
        private void FixupLevel(Level previousValue)
        {
            if (previousValue != null && previousValue.Logs.Contains(this))
            {
                previousValue.Logs.Remove(this);
            }
    
            if (Level != null)
            {
                if (!Level.Logs.Contains(this))
                {
                    Level.Logs.Add(this);
                }
                if (LevelId != Level.Id)
                {
                    LevelId = Level.Id;
                }
            }
        }

        #endregion

    }
}
